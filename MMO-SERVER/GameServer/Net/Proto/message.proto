syntax = "proto3";

package proto;

//============================================心跳检测==========================================
message HeartBeatRequest{

}

message HeartBeatResponse{

}

//============================================服务器信息==========================================
message KillRankingListItem{
	string chrName = 1;
	int64 killCount = 2;
}

message ServerInfoRequest{
	
}

message ServerInfoResponse{
	int32 OnlinePlayerCount = 1;
	int32 UserCount = 2;
	repeated KillRankingListItem killRankingList = 3;
}

//====================================entity=================================================
//网络三维向量
message Vec3 {
	int32 x = 1;
	int32 y = 2;
	int32 z = 3;
}

//entity位置信息
message NetEntity {
	int32 id = 1;
	Vec3 position = 2;
	Vec3 direction = 3;
}

//活动单位的模式
enum ActorMode{
	FREE = 0;		//自由进行任何操作
	DEAD = 1;		//死亡，无法操作。
	REST = 2;		//休息，挂机 回血回蓝(可以坐下的时候触发)
	FIGHT = 3;		//战斗状态，持续一段时间，期间可能无法骑马吧。
}
//活动单位的行为
enum ActorCombatMode{
    Stand = 0;
	Equip = 1;
	SwordFlight = 2;
}
enum ActorState{
    AirDown = 0;
	Death = 1;
	Defense = 2;
	Dizzy = 3;
	Evade = 4;
	Hurt = 5;
	Idle = 6;
	JumpUp = 7;
	Move = 8;
	Skill = 9;
	Constant = 10;
}
//同步entity:位置+状态
message NEntitySync{
	NetEntity entity = 1;
	bool force = 2;
	ActorState state = 3;
	int32 flag1 = 4;
}

//=======================================actor==============================================

//actor类型todo改名
enum ActorType
{
    Character=0;
    Monster=1;
    NPC=2;
}

//actor信息
message NetActor{
	int32 id = 1;
	int32 tid = 2;//单位类型
	NetEntity entity = 3;
	string name = 4;
	int32 level = 5;
	int64 exp = 6;
	int32 spaceId = 7; 
	int64 gold = 8;
	float hp=9;
	float mp=10;
	ActorType actorType = 11; 
	repeated SkillInfo skills = 12;			//技能列表
	repeated ItemInfo equipList = 13;	 	//穿戴装备
	float hpMax = 14;
	float mpMax = 15;
	int32 speed = 16;
	repeated BuffInfo buffsList = 17;		//actor的buff
}


//==================================================space=========================================
//进入游戏请求
message GameEnterRequest{
	int32 characterId = 1;
}
message GameEnterResponse{
	Result result = 1;
	string content = 2;
}

//有其他角色进入场景响应
message SpaceCharactersEnterResponse{
	int32 spaceId = 1;
	repeated NetActor characterList = 2;
}

//character进入场景响应(自己)
message SpaceEnterResponse{
	NetActor character = 1;
	repeated NetActor characterList = 2;
	repeated NetEItem eItemList = 3;
}


//entity离开场景响应,通知其他玩家
message SpaceEntityLeaveResponse{
	int32 entityId = 1;
}

//场景内的同步请求
message SpaceEntitySyncRequest{
	NEntitySync entitySync = 1;
}

//场景内的同步响应
message SpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}

//场景内的同步响应,和上面那个一样，
//但是这个是主要给某个客户端自己操作的角色进行强制同步用的
message CtlClientSpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}


//传送请求
message SpaceDeliverRequest{
	int32 spaceId = 1;
	int32 pointId = 2;	//场景中哪一个点的id
}
message SpaceDeliverResponse{
	Result result = 1;
	string context = 2;
}


//===================================user=================================================

//注册
message UserRegisterRequest{
	string username = 1;
	string password = 2;
}
message UserRegisterResponse{
	int32 code = 1;
	string message = 2;
}

//登录
message UserLoginRequest{
	string username = 1;
	string password = 2;
}
message UserLoginResponse{
	int32 code = 1;
	string message = 2;
	bool success = 3;
	string sessionId = 4;
}

//角色创建
message CharacterCreateRequest{
	string name = 1;
	int32 jobType = 2;
}
message CharacterCreateResponse{
	bool success = 1;
	string message = 2;
	NetActor character = 3;
}

// 查询角色列表的请求
message CharacterListRequest{
}
message CharacterListResponse{
	repeated NetActor characterList = 1;
}
// 删除角色的请求
message CharacterDeleteRequest{
	int32 characterId = 1;
}
message CharacterDeleteResponse{
	bool success = 1;
	string message = 2;
}

//重连请求
message ReconnectRequest{
	string sessionId = 1;
}
message  ReconnectResponse{
	bool success = 1;
	int32 entityId = 2;//重连的角色，0代表为选择角色
}

//退出游戏
message ExitRequest{

}
message ExitResponse{

}

//重新选择角色


//重新登录



//========================================skill========================================

//技能信息:skillid
message SkillInfo{
	int32 id = 1;
}

//技能释放结果
enum CastResult{
	Success 			= 0;	//成功		
	IsPassive			= 1;	//被动技能
	MpLack				= 2;	//MP不足
	EntityDead			= 3;	//entity已经死亡
	OutOfRange			= 4;	//超出范围
	Running				= 5;	//进行中
	ColdDown			= 6;	//冷却中
	TargetError			= 7;	//目标错误	
}

//施法信息：谁发的，要打谁
message CastInfo{
	int32 casterId = 1;
	int32 skillId = 2;
	int32 targetId = 3;
	Vec3 point = 4;	//技能施法点
	CastResult result = 5;//技能释放结果
}

//释放技能请求
message SpellCastRequest{
	CastInfo info = 1;
}
//释放技能响应,有些群攻的技能，这里用list做优化
message SpellCastResponse{
	repeated CastInfo list = 1;
}

//技能释放错误
message SpellFailResponse{
	int32 casterId = 1;
	int32 skillId = 2;
	CastResult reason = 3;
}

//伤害类型
enum DameageType{
	UNKNOWN = 0;		//默认值,表示未知或未设置
	PHYSICAL = 1;		
	MAGICAL = 2;
	REAL = 3;			//真伤,不受任何防御属性影响
}

//伤害数据
message Damage{
	int32 attackerId = 1;
	int32 targetId = 2;
	int32 skillId = 3;
	float amount = 4;		//伤害数值
	DameageType damageType = 5;
	bool isCrit = 6;		//是否暴击
	bool isMiss = 7;
	bool isImmune = 8;		//免疫伤害
}

//通知客户端有人收到伤害
message DamageResponse{
	repeated Damage list = 1;
}

//actor属性更新消息类型
message PropertyUpdate{

	//属性类型枚举
	enum Prop{
		HP = 0;		
		MP = 1;
		HPMax = 2;
		MPMax = 3;
		Mode = 4;
		Level = 5;
		Name = 6;
		Golds = 7;
		Exp = 8;		//经验
		Energy = 9;		//活力
		Speed = 10;
		CombatMode = 11;
		
		//幸运、罪恶、技能点
	}

	//为了可以存放不同的类型的数据
	message PropertyValue{
		oneof value{
			int32 int_value = 1;
			float float_value = 2;
			string string_value = 3;
			ActorMode mode_value = 4;
			int64 long_value = 5;
			ActorCombatMode combatMode_value = 6;
		}
	}

	int32 entity_id = 1;
	Prop property = 2;
	PropertyValue oldValue = 3;
	PropertyValue newValue = 4;

}

//actor属性更新响应
message PropertyUpdateRsponse{
	repeated PropertyUpdate list = 1;
}



//复活请求
message ReviveRequest{
	int32 entityId = 1;
}

//复活响应
message ReviveResponse{
	NEntitySync nEntitySycn = 1;
}



//==========================================chat==================================

enum Result{
	SUCCESS = 0;
	FAULT = 1;
}


enum ChatChannel{
	ALL = 0;				
	LOCAL = 1;
	WORLD = 2;
	SYSTEM = 4;
	PRIVATE = 8;
	TEAM = 16;
	GUILD = 32;
}

message ChatMessage{
	ChatChannel channel = 1;
	int32 id = 2;
	int32 from_id = 3;
	string from_name = 4;			//假设两个玩家在不同的地图私聊，因为客户端只记录本地图的玩家信息，所以找不到name。
									//也可以拿着这个id去问服务端，但是这样会加大服务端的压力
	int32 to_id = 5;
	string to_name = 6;
	string content = 7;
	double time = 8;				//时间，来拿做判断啊。比如说排序，聊天时能拿最近5分钟的消息....
}

message ChatRequest{
	ChatMessage message = 1;
}

message ChatResponseOne{
	Result result = 1;
	string errormsg = 2;
	ChatMessage message = 3;
}

message ChatResponse{
	Result result = 1;			//响应码，错误码
	string errormsg = 2;
	repeated ChatMessage localMessages = 3;
	repeated ChatMessage worldMessages = 4;
	repeated ChatMessage systemMessages = 5;
	repeated ChatMessage privateMessages = 6;
	repeated ChatMessage teamMessages = 7;
	repeated ChatMessage guildMessages = 8;
}



//======================================背包系统=========================================

//物品类型
enum ItemType{
    Material=0;       //材料&道具
    Consumable=1;     //消耗品
    Equipment=2;      //武器&装备
}

//品质
enum Quality {
    Common=0;     // 普通
    Fine=1;   	  // 非凡
    Rare=2;       // 稀有
    Epic=3;       // 史诗
    Legendary=4;  // 传说
    Artifact=5;   // 神器
}

//装备类型
enum EquipsType{
	UNSET = 0;      	//无
    Weapon = 1;    		//武器
	SecondaryWeapon = 2;//副武器
	Helmet = 3;			//头盔
    Neck = 4;      		//项链
    Chest = 5;     		//胸甲
	Wristband = 6;		//护腕
    Belt = 7;      		//腰带
    Bracelet = 8;		//手镯
	Legs = 9;      		//裤子
    Ring = 10;      	//戒指
    Boots = 11;     	//鞋子
    Wings = 12;    		//翅膀
}

//物品信息
message ItemInfo{
	int32 itemId = 1;			//物品id
	int32 amount = 2;			//物品数量
	int32 position = 3;			//物品所处位置,在哪个格子
	EquipData equipdata = 4; 	//装备信息，物品有这个属性，说明是武器。
}

//装备数据
message EquipData{
	//打孔、镶嵌、强化
}

//Net itemEntity信息(用于场景中物品的同步)
message NetEItem{
	ItemInfo ItemInfo = 1;
	int32 spaceId = 2;
	NetEntity entity = 3;
}

//库存对象信息:背包/仓库
message InventoryInfo{
	int32 capacity = 1;//格子数量
	repeated ItemInfo list = 2;
}

//itemEntity 信息同步响应包
message NetEItemSync{
	NetEItem  netEItem =  1;
}

//场景中物品更新响应包
message ItemUpdate{
	enum UpdateType{
		ADD = 0;
		DELETE = 1;
		UPDATE = 2;
	}
	UpdateType type = 1;
	ItemInfo itme = 2;
}

//item进入场景响应
message SpaceItemEnterResponse{
	NetEItem  netEItem =  1;
}

//获取角色的Inventory信息请求
//这样设计可以自由定制想查询什么就置为true
message InventoryInfoRequest{
	int32 entityId = 1; 
	bool queryKnapsack = 2;
	bool queryWarehouse = 3;
	bool queryEquipment = 4;
}

//获取角色的Inventory信息响应
message InventoryInfoResponse{
	int32 entityId = 1;
	InventoryInfo KnapsackInfo = 2;
	InventoryInfo WarehouseInfo = 3;
	InventoryInfo EquipmentInfo = 4;
}

//仓库类型
enum InventoryType{
	Knapsack = 0;
	Warehouse = 1;
	EquipmentColumn = 2;
	CurrentScene = 3;
}

//背包物品放置请求
message ItemPlacementRequest{
	int32 entityId = 1;
	InventoryType originInventoryTpey = 2;
	int32 originIndex = 3;
	int32 targetIndex = 4;
}

//使用物品请求
message ItemUseRequest{
	int32 entityId = 1;
	int32 slotIndex = 2;
	int32 count = 3;
}

//使用物品响应
message ItemUseResponse{
	bool result = 1;
	int32 slotIndex = 2;
	int32 count = 3;
}

//物品丢弃
message ItemDiscardRequest{
	int32 slotIndex = 1;
	int32 number = 2;
	InventoryType type = 3;
}
message ItemDiscardResponse{
	Result result = 1;
	int32 itemId = 2;
	int32 amout = 3;
}



//物品拾起
message ItemPickUpRequest{
	int32 entityId = 1;
}
message ItemPickupResponse{
	Result result = 1;
	int32 itemId = 2;
	int32 amout = 3;
}

//拉取全部装备信息请求
message EquipsRequest{

}

//拉取全部装备信息响应
message EquipsResponse{
	int32 entityId = 1;
	repeated ItemInfo equipsList = 2;
}

//装备信息更新响应,变化的装备发送给各个客户端
message EquipsUpdateResponse{
	int32 entityId = 1;
	repeated ItemInfo equipsList = 2;
}

//背包中的装备穿戴请求
message WearEquipmentRequest{
	int32 slotIndex = 1;
}

//装备栏中的装备卸载请求
message UnloadEquipmentRequest{
	EquipsType type = 1;
}


//======buff========================================================

//buff类型
enum BuffType{
	Buff = 0;
	Debuff = 1;
}

//buff叠加方式
enum BuffConflict{
	Combine = 0;		//合并为一个buff，叠层(提升等级)
	Separate = 1;		//独立存在
	Cover = 2;			//覆盖，后者覆盖前者
}

message BuffInfo{
	int32 id = 1;	//实例id
	int32 bid = 2;
	int32 ownerId = 3;
	int32 providerId = 4;
	int32 currentLevel = 5;		//当前等级
	float ResidualDuration = 6;	//当前剩余时间
}

//buff添加响应
message BuffsAddResponse{
	repeated BuffInfo list = 1;
}

//buff移除响应
message BuffsRemoveResponse{
	repeated BuffInfo list = 1;
}

//buff更新响应
message BuffsUpdateResponse{
	repeated BuffInfo list = 1;
}