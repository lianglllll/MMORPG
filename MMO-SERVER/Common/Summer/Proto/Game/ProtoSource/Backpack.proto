syntax = "proto3";
package HS.Protobuf.Backpack;

enum BackpackProtocol{
	BACKPACK_PROTOCOL_NONE							= 0;
	BACKPACK_PROTOCOL_GET_ITEM_INVENTORY_DATA_REQ	= 33001;	// [GetItemInventoryDataRequest]
	BACKPACK_PROTOCOL_GET_ITEM_INVENTORY_DATA_RESP	= 33002;	// [GetItemInventoryDataResponse]
	BACKPACK_PROTOCOL_CHANGE_ITEM_POSITION_REQ		= 33003;	// [ChangeItemPositionRequest]
	BACKPACK_PROTOCOL_CHANGE_ITEM_POSITION_RESP		= 33004;	// [ChangeItemPositionResponse]
	BACKPACK_PROTOCOL_USE_ITEM_REQ					= 33005;	// [UseItemRequest]
	BACKPACK_PROTOCOL_USE_ITEM_RESP					= 33006;	// [UseItemResponse]
	BACKPACK_PROTOCOL_DISCARD_ITEM_REQ				= 33007;	// [DiscardItemRequest]
	BACKPACK_PROTOCOL_DISCARD_ITEM_RESP				= 33008;	// [DiscardItemResponse]
	BACKPACK_PROTOCOL_WEAR_EQUIP_REQ				= 33009;	// [WearEquipRequest]
	BACKPACK_PROTOCOL_WEAR_EQUIP_RESP				= 33010;	// [WearEquipResponse]
	BACKPACK_PROTOCOL_UNLOAD_EQUIP_REQ				= 33011;	// [UnloadEquipRequest]
	BACKPACK_PROTOCOL_UNLOAD_EQUIP_RESP				= 33012;	// [UnloadEquipResponse]
	BACKPACK_PROTOCOL_PICK_UP_GAME_ITEM_TO_GAME_REQ		= 33013;	// [PickUpSceneItemToGameRequest]
	BACKPACK_PROTOCOL_PICK_UP_GAME_ITEM_TO_GAME_RESP	= 33014;	// [PickUpSceneItemToGameResponse]
}

enum ItemType{
    Material	= 0;    // 材料&道具
    Consumable	= 1;	// 消耗品
    Equipment	= 2;    // 武器&装备
}
enum ItemQuality {
    ITEM_QUALITY_COMMON		= 0;    // 普通
    ITEM_QUALITY_FINE		= 1;   	// 非凡
    ITEM_QUALITY_RARE		= 2;    // 稀有
    ITEM_QUALITY_EPIC		= 3;    // 史诗
    ITEM_QUALITY_LEGENDARY	= 4;	// 传说
    ITEM_QUALITY_ARTIFACT	= 5;	// 神器
}
enum EquipsType{
	UNSET			= 0;    // 无
    Weapon			= 1;    // 武器
	Helmet			= 2;	// 头盔
    Neck			= 3;    // 项链
    Chest			= 4;    // 胸甲
	Wristband		= 5;	// 护腕
    Bracelet		= 6;	// 手镯
    Ring			= 7;	// 戒指
    Belt			= 8;    // 腰带
	Legs			= 9;    // 裤子
    Boots			= 10;   // 鞋子
    Wings			= 11;   // 翅膀|飞行道具
}
message EquipData{
	// 打孔、镶嵌、强化
	EquipSlotType slotType = 1;
}
message NetItemDataNode{
	int32 itemId		= 1;	// 物品id
	ItemType itemType	= 2;
	int32 amount		= 3;	// 物品数量
	int32 gridIdx		= 4;	// 物品所处位置,在哪个格子
	EquipData equipdata = 5; 	// 装备信息，物品有这个属性，说明是武器。
}
enum EquipSlotType{
	EQUIP_SLOT_TYPE_NONE		= 0;
	EQUIP_SLOT_TYPE_WEAPON1		= 1;
	EQUIP_SLOT_TYPE_WEAPON2		= 2;
	EQUIP_SLOT_TYPE_HELMET		= 3;
	EQUIP_SLOT_TYPE_NECK		= 4;
	EQUIP_SLOT_TYPE_CHEST		= 5;
	EQUIP_SLOT_TYPE_WRISTBAND	= 6;
	EQUIP_SLOT_TYPE_BRACELET	= 7;
	EQUIP_SLOT_TYPE_RING		= 8;
	EQUIP_SLOT_TYPE_BELT		= 9;
	EQUIP_SLOT_TYPE_LEGS		= 10;
	EQUIP_SLOT_TYPE_BOOTS		= 11;
	EQUIP_SLOT_TYPE_WINGS		= 12;
}


enum ItemInventoryType{
	ITEM_INVENTORY_TYPE_BACKPACK	= 0;
	ITEM_INVENTORY_TYPE_WAREHOUSE	= 1;
	ITEM_INVENTORY_TYPE_EQUIPMENTS	= 2;
}
message NetItemInventoryDataNode{
	ItemInventoryType inventoryType			= 1;
	int32 capacity							= 2;
	repeated NetItemDataNode itemDataNodes	= 3;
}

message GetItemInventoryDataRequest{
	string sessionId		= 1;
	string cId				= 2;
	ItemInventoryType type	= 3;
}
message GetItemInventoryDataResponse{
	string sessionId				= 1;
	NetItemInventoryDataNode node	= 2;
}

// 采用预测机制 + 记录副本机制 + 请求响应。
// 我们客户端对背包的位置操作都会进行记录，然后发包
// 只有当某个包响应了，我们就会更新副本到当前的这个响应的操作为止。

// 背包物品放置请求
message ChangeItemPositionRequest{
	string sessionId					= 1;
	string cId							= 2;
	ItemInventoryType originInventory	= 3;
	int32 originIndex					= 4;
	ItemInventoryType targetInventory	= 5;
	int32 targetIndex					= 6;
	int32 seq							= 7;
}
message ChangeItemPositionResponse{
	string sessionId		= 1;
	ItemInventoryType type	= 2;
	int32 seq				= 3;
	int32 resultCode		= 4;
	string resultMsg		= 5;
}

// 使用物品请求
message UseItemRequest{
	string sessionId		= 1;
	string cId				= 2;
	int32 gridIndex			= 3;
	int32 count				= 4;
}
message UseItemResponse{
	string sessionId	= 1;
	int32 resultCode	= 2;
	string resultMsg	= 3;
}

// 物品丢弃
message DiscardItemRequest{
	string sessionId		= 1;
	string cId				= 2;
	ItemInventoryType type	= 3;
	int32 gridIndex			= 4;
	int32 count				= 5;
	int32 seq				= 6;
}
message DiscardItemResponse{
	string sessionId		= 1;
	int32  resultCode		= 2;
	string resultMsg		= 3;
	int32 seq				= 4;
}

// 背包中的装备穿戴请求
message WearEquipRequest{
	string sessionId			= 1;
	string cId					= 2;
	int32 gridIndex				= 3;
	EquipSlotType equipSlotType = 4;
	int32 seq					= 5;
}
message WearEquipResponse{
	string sessionId				= 1;
	int32 replaceEquipNewSlotIndex	= 2;
	int32 seq						= 3;
	int32 resultCode				= 4;
	string resultMsg				= 5;
}

// 装备栏中的装备卸载请求
message UnloadEquipRequest{
	string sessionId	= 1;
	string cId			= 2;
	EquipSlotType type	= 3;
	int32 seq			= 4;
}
message UnloadEquipResponse{
	string sessionId				= 1;
	EquipSlotType type				= 2;
	int32 seq						= 3;
	int32 replaceEquipNewSlotIndex	= 4;
}

// scene发过来的
message PickUpSceneItemToGameRequest{
	string cId						= 1;
	NetItemDataNode itemDataNode	= 2;
}
message PickUpSceneItemToGameResponse{
	int32 entityId		= 1;
	int32 resultCode	= 2;
	string resultMsg	= 3;
}













// ================弃用======================

// 品质
enum Quality {
    Common=0;     // 普通
    Fine=1;   	  // 非凡
    Rare=2;       // 稀有
    Epic=3;       // 史诗
    Legendary=4;  // 传说
    Artifact=5;   // 神器
}
// 物品信息
message ItemInfo{
	int32 itemId = 1;			//物品id
	int32 amount = 2;			//物品数量
	int32 position = 3;			//物品所处位置,在哪个格子
	EquipData equipdata = 4; 	//装备信息，物品有这个属性，说明是武器。
}


// 场景中物品更新响应包
message ItemUpdate{
	enum UpdateType{
		ADD = 0;
		DELETE = 1;
		UPDATE = 2;
	}
	UpdateType type = 1;
	ItemInfo itme = 2;
}

// 获取角色的Inventory信息请求
// 这样设计可以自由定制想查询什么就置为true
message InventoryInfoRequest{
	int32 entityId = 1; 
	bool queryKnapsack = 2;
	bool queryWarehouse = 3;
	bool queryEquipment = 4;
}
// 获取角色的Inventory信息响应
message InventoryInfoResponse{
	int32 entityId = 1;
	InventoryInfo KnapsackInfo = 2;
	InventoryInfo WarehouseInfo = 3;
	InventoryInfo EquipmentInfo = 4;
}

// 仓库类型
enum InventoryType{
	Knapsack = 0;
	Warehouse = 1;
	EquipmentColumn = 2;
	CurrentScene = 3;
}
// 库存对象信息:背包/仓库
message InventoryInfo{
	int32 capacity = 1;//格子数量
	repeated ItemInfo list = 2;
}

// 背包物品放置请求
message ItemPlacementRequest{
	int32 entityId = 1;
	InventoryType originInventoryTpey = 2;
	int32 originIndex = 3;
	int32 targetIndex = 4;
}

// 使用物品请求
message ItemUseRequest{
	int32 entityId = 1;
	int32 slotIndex = 2;
	int32 count = 3;
}
message ItemUseResponse{
	bool result = 1;
	int32 slotIndex = 2;
	int32 count = 3;
}

// 物品丢弃
message ItemDiscardRequest{
	int32 slotIndex = 1;
	int32 number = 2;
	InventoryType type = 3;
}
message ItemDiscardResponse{
	int32  resultCode		= 1;
	string resultMsg		= 2;
	int32 itemId			= 3;
	int32 amount			= 4;

}
// 物品拾起
message ItemPickUpRequest{
	int32 entityId = 1;
}
message ItemPickupResponse{
	int32  resultCode		= 1;
	string resultMsg		= 2;
	int32 itemId			= 3;
	int32 amount			= 4;
}

// 拉取全部装备信息请求
message EquipsRequest{
}
message EquipsResponse{
	int32 entityId = 1;
	repeated ItemInfo equipsList = 2;
}

// 装备信息更新响应,变化的装备发送给各个客户端
message EquipsUpdateResponse{
	int32 entityId = 1;
	repeated ItemInfo equipsList = 2;
}

// 背包中的装备穿戴请求
message WearEquipmentRequest{
	int32 slotIndex = 1;
}
// 装备栏中的装备卸载请求
message UnloadEquipmentRequest{
	EquipsType type = 1;
}
// ================弃用======================
