syntax = "proto3";
import "Common/ProtoSource/Common.proto";
package HS.Protobuf.GameGateMgr;

enum GameGateMgrProtocl{
	GAMEGATEMGR_PROTOCL_NONE = 0;
	GAMEGATEMGR_PROTOCL_REGISTER_TO_GGM_REQ = 32001;		//[RegisterToGGMRequest]
	GAMEGATEMGR_PROTOCL_REGISTER_TO_GGM_RESP = 32002;		//[RegisterToGGMResponse]
	GAMEGATEMGR_PROTOCL_EXECUTE_GG_COMMAND_REQ = 32003;		//[ExecuteGGCommandRequest]
	GAMEGATEMGR_PROTOCL_EXECUTE_GG_COMMAND_RESP = 32004;	//[ExecuteGGCommandResponse]
	GAMEGATEMGR_PROTOCL_EXECUTE_S_COMMAND_REQ = 32005;		//[ExecuteSCommandRequest]
	GAMEGATEMGR_PROTOCL_EXECUTE_S_COMMAND_RESP = 32006;		//[ExecuteSCommandResponse]
	GAMEGATEMGR_PROTOCL_REGISTER_SESSOION_TO_GGM_REQ = 32007;		//[RegisterSessionToGGMRequest]
	GAMEGATEMGR_PROTOCL_REGISTER_SESSOION_TO_GGM_RESP = 32008;		//[RegisterSessionToGGMResponse]
}

message RegisterToGGMRequest{
	HS.Protobuf.Common.ServerInfoNode serverInfoNode = 1;
}
message RegisterToGGMResponse{
	int32  resultCode		= 1;	//0 成功 小于0正常流程  大于0异常流程
	string resultMsg		= 2;
}

message ExecuteGGCommandRequest{
	HS.Protobuf.Common.GateCommand command = 1;
	int32 gateServerId = 2;
	int64 timeStamp = 3;
	oneof payload{
		HS.Protobuf.Common.ServerInfoNode gameServerInfoNode = 4;	
	}
}
message ExecuteGGCommandResponse{
	int32  resultCode		= 1;	
	HS.Protobuf.Common.GateCommand errCommand = 2;
}

message ExecuteSCommandRequest{
	int32 sceneServerId = 2;
	int64 timeStamp = 3;
	oneof payload{
		HS.Protobuf.Common.ServerInfoNode gameServerInfoNode = 4;	
	}
}
message ExecuteSCommandResponse{
	int32  resultCode		= 1;	
	HS.Protobuf.Common.GateCommand errCommand = 2;
}

message RegisterSessionToGGMRequest{
	int32 taskId = 1;
	int32 worldId = 2;
	string session = 3;
}
message RegisterSessionToGGMResponse{
	int32 taskId = 1;
	int32 resultCode = 2;
	string resultMsg = 3;
	repeated HS.Protobuf.Common.ServerInfoNode gameGateInfos = 4;
}
