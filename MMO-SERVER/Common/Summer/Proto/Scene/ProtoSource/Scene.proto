syntax = "proto3";
import "Common/ProtoSource/Common.proto";
import "Scene/ProtoSource/SceneEntity.proto";
import "DBProxy/ProtoSource/DBCharacter.proto";
import "Game/ProtoSource/Backpack.proto";
package HS.Protobuf.Scene;

enum SceneProtocl{
	SCENE_PROTOCL_NONE = 0;
	SCENE_PROTOCL_REGISTER_TO_SCENE_REQ				= 40001;	// [RegisterToSceneRequest]
	SCENE_PROTOCL_REGISTER_TO_SCENE_RESP			= 40002;	// [RegisterToSceneResponse]
	SCENE_PROTOCL_CHARACTER_ENTER_SCENE_REQ			= 40003;	// [CharacterEnterSceneRequest]
	SCENE_PROTOCL_SELF_CHARACTER_ENTER_SCENE_RESP	= 40004;	// [SelfCharacterEnterSceneResponse]
	SCENE_PROTOCL_OTHER_ENTITY_ENTER_SCENE_RESP		= 40005;	// [OtherEntityEnterSceneResponse]
	SCENE_PROTOCL_CHARACTER_LEAVE_SCENE_REQ			= 40006;	// [CharacterLeaveSceneRequest]
	SCENE_PROTOCL_CHARACTER_LEAVE_SCENE_RESP		= 40007;	// [CharacterLeaveSceneResponse]
	SCENE_PROTOCL_OTHER_ENTITY_LEAVE_SCENE_RESP		= 40008;	// [OtherEntityLeaveSceneResponse]
	SCENE_PROTOCL_ACTOR_CHANGE_MODE_REQ				= 40009;	// [ActorChangeModeRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_MODE_RESP			= 40010;	// [ActorChangeModeResponse]
	SCENE_PROTOCL_ACTOR_CHANGE_STATE_REQ			= 40011;	// [ActorChangeStateRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_STATE_RESP			= 40012;	// [ActorChangeStateResponse]
	SCENE_PROTOCL_ACTOR_CHANGE_TRANSFORM_DATA_REQ	= 40013;	// [ActorChangeTransformDataRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_TRANSFORM_DATA_RESP	= 40014;	// [ActorChangeTransformDataResponse]
	SCENE_PROTOCL_SCENE_DELIVER_REQ					= 40015;	// [SceneDeliverRequest]
	SCENE_PROTOCL_SCENE_DELIVER_RESP				= 40016;	// [SceneDeliverResponse]
	SCENE_PROTOCL_CHARACTER_REVIVE_REQ				= 40017;	// [CharacterReviveRequest]
	SCENE_PROTOCL_CHARACTER_REVIVE_RESP				= 40018;	// [CharacterReviveResponse]
	SCENE_PROTOCL_SCENE_2_GATE_MSG					= 40019;	// [Scene2GateMsg]


	SCENE_PROTOCL_ACTOR_PROPERTY_UPDATE_RESP		= 40022;	// [ActorPropertyUpdateRsponse]

	SCENE_PROTOCL_SCENE_ITEM_OPRATION_RESP			= 40024;	// [SceneItemOperationResponse]
	SCENE_PROTOCL_PICKUP_SCENE_ITEM_REQ				= 40025;	// [PickUpSceneItemRequest]
	SCENE_PROTOCL_PICKUP_SCENE_ITEM_RESP			= 40026;	// [PickupSceneItemResponse]
	SCENE_PROTOCL_DISCARD_GAME_ITEM_TO_SCENE_REQ	= 40027;	// [DiscardGameItemToSceneRequest]
	SCENE_PROTOCL_DISCARD_GAME_ITEM_TO_SCENE_RESP	= 40028;	// [DiscardGameItemToSceneResponse]
	SCENE_PROTOCL_CHANGE_EQUIPMENT_TO_SCENE_REQ		= 40029;	// [ChangeEquipmentToSceneRequest]
	SCENE_PROTOCL_CHANGE_EQUIPMENT_TO_SCENE_RESP	= 40030;	// [ChangeEquipmentToSceneResponse]


	SCENE_PROTOCL_REGISTER_TASK_CONDITION_TO_SCENE_REQ		= 40031;	// [RegisterTaskConditionToSceneRequest]
	SCENE_PROTOCL_REGISTER_TASK_CONDITION_TO_SCENE_RESP		= 40032;	// [RegisterTaskConditionToSceneresponse]
	SCENE_PROTOCL_UN_REGISTER_TASK_CONDITION_TO_SCENE_REQ	= 40033;	// [UnRegisterTaskConditionToSceneRequest]
	SCENE_PROTOCL_UN_REGISTER_TASK_CONDITION_TO_SCENE_RESP	= 40034;	// [UnRegisterTaskConditionToSceneResponse]
}
enum SceneType {
    SCENE_TYPE_NULL             = 0;
    SCENE_TYPE_CITY             = 1; // 主城
    SCENE_TYPE_FIELD            = 2; // 野外    
    SCENE_TYPE_SINGLE_MISSION   = 3; // 单人副本
    SCENE_TYPE_MULTI_MISSION    = 4; // 多人副本
    SCENE_TYPE_LOGIN            = 5; // 登陆界面场景
    SCENE_TYPE_KIN_LAND         = 6; // 家族领地 
    SCENE_TYPE_ALL              = 8; // 注意：最大值255，新增类型找空位即可
};

// GameGate注册用
message RegisterToSceneRequest{
	HS.Protobuf.Common.ServerInfoNode serverInfoNode = 1;
}
message RegisterToSceneResponse{
	int32 resultCode = 1;
	string resultMsg = 2;
	string sceneToken = 3;
}

// Game调用
message CharacterEnterSceneRequest{
	int32 taskId													= 1;
	string sessionId												= 2;
	int32 gameGateServerId											= 3;
	HS.Protobuf.DBProxy.DBCharacter.DBCharacterNode dbChrNode		= 4;
	repeated NetEquipmentNode equips								= 5;
	repeated RegisterTaskConditionToSceneRequest needListenConds	= 6;
}
message SelfCharacterEnterSceneResponse{
	int32 taskId														= 1;
	int32 resultCode													= 2;
	string resultMsg													= 3;
	HS.Protobuf.SceneEntity.NetActorNode selfNetActorNode				= 4;
	// 场景中的角色、怪物、物品信息也要返回
	repeated HS.Protobuf.SceneEntity.NetActorNode otherNetActorNodeList	= 5;
	repeated HS.Protobuf.SceneEntity.NetItemNode  otherNetItemNodeList	= 6;
}
message OtherEntityEnterSceneResponse{
	string sessionId									= 1;
	int32 sceneId										= 2;		 // 防止因为时序问题，client已经切换场景了，这个包才过来。
	HS.Protobuf.SceneEntity.SceneEntityType entityType	= 3;
	HS.Protobuf.SceneEntity.NetActorNode actorNode		= 4;
	HS.Protobuf.SceneEntity.NetItemNode  itemNode		= 5;
}
message CharacterLeaveSceneRequest{
	int32 entityId = 1;
}
message NeedSaveSceneData{
	HS.Protobuf.Common.NetVector3 position = 1;
}
message CharacterLeaveSceneResponse{
	string cId = 1;
	NeedSaveSceneData sceneSaveDatea = 2;
}
message OtherEntityLeaveSceneResponse{
	string sessionId = 1;
	int32 sceneId = 2;		
	int32 entityId = 3;
}

// actor 相关
message ActorChangeModeRequest{
	string sessionId = 1;
	int32 entityId = 2;
	HS.Protobuf.SceneEntity.NetActorMode mode = 3;
	int64 timestamp = 4;
}
message ActorChangeModeResponse{
	string sessionId = 1;
	int32 entityId = 2;
	HS.Protobuf.SceneEntity.NetActorMode mode = 3;
	int64 timestamp = 4;
	int32 sceneId = 5;
}

enum NetAcotrEvadeStatePayload {
	NET_ACTOR_EVADE_STATE_PAYLOAD_NONE	= 0;
	NET_ACTOR_EVADE_STATE_PAYLOAD_LEFT	= 1;
	NET_ACTOR_EVADE_STATE_PAYLOAD_RIGHT = 2;
	NET_ACTOR_EVADE_STATE_PAYLOAD_FRONT = 3;
	NET_ACTOR_EVADE_STATE_PAYLOAD_BACK	= 4;
}
message ActorStatePayLoad{
	oneof payLoad{
		float speed								= 1;
		NetAcotrEvadeStatePayload evadePayLoad	= 2;
		float jumpVerticalVelocity				= 3;
	}
}
message ActorChangeStateRequest{
	string sessionId										= 1;
	int32 entityId											= 2;
	int64 timestamp											= 3;
	HS.Protobuf.SceneEntity.NetActorState state				= 4;
	HS.Protobuf.SceneEntity.NetTransform originalTransform	= 5;
	ActorStatePayLoad payLoad								= 6;
}
message ActorChangeStateResponse{
	string sessionId										= 1;
	int32 sceneId											= 2;
	int32 entityId											= 3;
	int64 timestamp											= 4;
	HS.Protobuf.SceneEntity.NetActorState state				= 5;
	HS.Protobuf.SceneEntity.NetTransform originalTransform	= 6;
	ActorStatePayLoad payLoad								= 7;
}

message ActorChangeTransformDataPayLoad{
	int32 verticalSpeed = 1;
	int32 horizontalSpeed = 2;
	int32 hightSpeed = 3;
}
message ActorChangeTransformDataRequest{
	string sessionId										= 1;
	int32 entityId											= 2;
	int64 timestamp											= 3;
	HS.Protobuf.SceneEntity.NetActorState state				= 4;
	HS.Protobuf.SceneEntity.NetTransform originalTransform	= 5;
	ActorChangeTransformDataPayLoad payLoad					= 6;
}
message ActorChangeTransformDataResponse{
	string sessionId										= 1;
	int32 sceneId											= 2;
	int32 entityId											= 3;
	int64 timestamp											= 4;
	HS.Protobuf.SceneEntity.NetActorState state				= 5;
	HS.Protobuf.SceneEntity.NetTransform originalTransform	= 6;
	ActorChangeTransformDataPayLoad payLoad					= 7;
	// 当skill状态的时候，技能有可能是rootmotion的，这时候就需要去更新我们服务端的信息了。
	// todo 这只是比较粗糙的做法，真正的做法可能是在服务器运行 动作的信息 来更新角色位置。
	bool isNotBroadcast										= 8;		
}

// 传送
message SceneDeliverRequest{
	string sessionId	= 1;
	int32 sceneId		= 2;
	int32 entityId		= 3;
	int32 pointId		= 4;	// 场景中哪一个点的id
}
message SceneDeliverResponse{
	string sessionId		= 1;
	int32  resultCode		= 2;
	string resultMsg		= 3;
}

// 复活
message CharacterReviveRequest{
	string sessionId	= 1;
	int32 entityId		= 2;
}
message CharacterReviveResponse{
	string sessionId		= 1;
	int32  resultCode		= 2;
	string resultMsg		= 3;
}

// 用于包装scene发送到GameGate的信息
message Scene2GateMsg{
	string sessionId = 1;
	bytes content = 2;
}

// 属性
enum PropertyType{
	PROPERTY_TYPE_NONE		= 0;
	PROPERTY_TYPE_HP		= 1;
	PROPERTY_TYPE_MP		= 2;
	PROPERTY_TYPE_MAX_HP	= 3;
	PROPERTY_TYPE_MAX_MP	= 4;
	PROPERTY_TYPE_SPEED		= 5;
	PROPERTY_TYPE_EXP		= 6;
	PROPERTY_TYPE_LEVEL		= 7;
	//幸运、罪恶、技能点
}
message ActorPropertyUpdate{

	// 为了可以存放不同的类型的数据
	message PropertyValue{
		oneof value{
			int32 int_value		= 1;
			int64 long_value	= 2;
			float float_value	= 3;
			string string_value = 4;
		}
	}

	int32 entityId				= 1;
	PropertyType propertyType	= 2;
	PropertyValue oldValue		= 3;
	PropertyValue newValue		= 4;
}
message ActorPropertyUpdateRsponse{
	string sessionId						= 1;
	repeated ActorPropertyUpdate propertys	= 2;
}

// 物品
enum SceneItemOperationType{
	SCENE_ITEM_OPERATION_TYPE_UPDATE = 0;
} 
message SceneItemOperationResponse{
	string sessionId						= 1;
	int32 sceneId							= 2;
	SceneItemOperationType operation_type	= 3;		
	oneof payload {
		// 可能数量发生变化
		int32 newCount						= 4;
	}
}

// 物品拾起
message PickUpSceneItemRequest{
	string sessionId	= 1;
	int32 entityId		= 2;
	int32 itemEntityId	= 3; 
}
message PickupSceneItemResponse{
	string sessionId	= 1;
	int32  resultCode	= 2;
	string resultMsg	= 3;
	int32 itemId		= 4;
	int32 count			= 5;
}

// Game发的
message DiscardGameItemToSceneRequest{
	int32 entityId										= 1;	// chr的entityId
	HS.Protobuf.Backpack.NetItemDataNode itemDataNode	= 2;
}
message DiscardGameItemToSceneResponse{
}
enum ChangeEquipmentOperationType{
	CHANGE_EQUIPMENT_OPERATION_TYPE_NONE	= 0;
	CHANGE_EQUIPMENT_OPERATION_TYPE_UNLOAD	= 1;
	CHANGE_EQUIPMENT_OPERATION_TYPE_WEAR	= 2;
}

message NetEquipmentNode{
	HS.Protobuf.Backpack.EquipSlotType equipType				= 1;
	HS.Protobuf.Common.NetAttrubuteDataNode attrubuteDataNode	= 2;
}
message ChangeEquipmentToSceneRequest{
	int32 entityId										= 1;
	ChangeEquipmentOperationType operationType			= 2;
	NetEquipmentNode equipNode							= 3;
}
message ChangeEquipmentToSceneResponse{
}


message TaskConditionDataNode{
	int32 taskId				= 1;
	string conditionType		= 2;
	repeated string Parameters	= 3;
}
message RegisterTaskConditionToSceneRequest{
	int32 entityId							= 1;
	int32 taskId							= 2;
	repeated TaskConditionDataNode conds	= 3;
}
message RegisterTaskConditionToSceneresponse{
}

message UnRegisterTaskConditionToSceneRequest{
	int32 entityId				= 1;
	int32  taskId				= 2;
	repeated string condTypes	= 3;
}
message UnRegisterTaskConditionToSceneResponse{
}























// === 下面是无用的====================================================


//有其他角色进入场景响应
message SpaceCharactersEnterResponse{
	int32 spaceId = 1;
	repeated HS.Protobuf.SceneEntity.NetActor characterList = 2;
}
//character进入场景响应(自己)
message SpaceEnterResponse{
	HS.Protobuf.SceneEntity.NetActor character = 1;
	repeated HS.Protobuf.SceneEntity.NetActor characterList = 2;
	repeated HS.Protobuf.SceneEntity.NetEItem eItemList = 3;
}

//entity离开场景响应,通知其他玩家
message SpaceEntityLeaveResponse{
	int32 entityId = 1;
}

//同步entity:位置+状态
message NEntitySync{
	HS.Protobuf.SceneEntity.NetEntity entity = 1;
	bool force = 2;			//是否强制同步位置和旋转
	HS.Protobuf.SceneEntity.ActorState state = 3;
	int32 flag1 = 4;
}
//场景内的同步请求
message SpaceEntitySyncRequest{
	NEntitySync entitySync = 1;
}
message SpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}
//场景内的同步响应,和上面那个一样，
message CtlClientSpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}

//传送请求
message SpaceDeliverRequest{
	int32 spaceId = 1;
	int32 pointId = 2;	//场景中哪一个点的id
}
message SpaceDeliverResponse{
	int32  resultCode		= 1;
	string resultMsg		= 2;
}

//复活请求
message ReviveRequest{
	int32 entityId = 1;
}
message ReviveResponse{
	NEntitySync nEntitySycn = 1;
}

// itemEntity 信息同步响应包（没用上）
message NetEItemSync{
	HS.Protobuf.SceneEntity.NetEItem  netEItem =  1;
}
// item进入场景响应
message SpaceItemEnterResponse{
	HS.Protobuf.SceneEntity.NetEItem  netEItem =  1;
}

