syntax = "proto3";
import "Common/ProtoSource/Common.proto";
import "Scene/ProtoSource/SceneEntity.proto";
import "DBProxy/ProtoSource/DBCharacter.proto";
package HS.Protobuf.Scene;

enum SceneProtocl{
	SCENE_PROTOCL_NONE = 0;
	SCENE_PROTOCL_REGISTER_TO_SCENE_REQ = 40001;			// [RegisterToSceneRequest]
	SCENE_PROTOCL_REGISTER_TO_SCENE_RESP = 40002;			// [RegisterToSceneResponse]
	SCENE_PROTOCL_CHARACTER_ENTER_SCENE_REQ = 40003;		// [CharacterEnterSceneRequest]
	SCENE_PROTOCL_SELF_CHARACTER_ENTER_SCENE_RESP = 40004;	// [SelfCharacterEnterSceneResponse]
	SCENE_PROTOCL_OTHER_ENTITY_ENTER_SCENE_RESP = 40005;	// [OtherEntityEnterSceneResponse]
	SCENE_PROTOCL_CHARACTER_LEAVE_SCENE_REQ = 40006;		// [CharacterLeaveSceneRequest]
	SCENE_PROTOCL_OTHER_ENTITY_LEAVE_SCENE_RESP = 40007;	// [OtherEntityLeaveSceneResponse]

	SCENE_PROTOCL_ACTOR_CHANGE_MODE_REQ = 40009;			// [ActorChangeModeRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_MODE_RESP = 40010;			// [ActorChangeModeResponse]
	SCENE_PROTOCL_ACTOR_CHANGE_STATE_REQ = 40011;			// [ActorChangeStateRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_STATE_RESP = 40012;			// [ActorChangeStateResponse]
	SCENE_PROTOCL_ACTOR_CHANGE_MOTION_DATA_REQ = 40013;		// [ActorChangeMotionDataRequest]
	SCENE_PROTOCL_ACTOR_CHANGE_MOTION_DATA_RESP = 40014;	// [ActorChangeMotionDataResponse]
}

enum SceneType {
    SCENE_TYPE_NULL             = 0;
    SCENE_TYPE_CITY             = 1; // 主城
    SCENE_TYPE_FIELD            = 2; // 野外    
    SCENE_TYPE_SINGLE_MISSION   = 3; // 单人副本
    SCENE_TYPE_MULTI_MISSION    = 4; // 多人副本
    SCENE_TYPE_LOGIN            = 5; // 登陆界面场景
    SCENE_TYPE_KIN_LAND         = 6; // 家族领地 
    SCENE_TYPE_ALL              = 8; // 注意：最大值255，新增类型找空位即可
};

message RegisterToSceneRequest{
	HS.Protobuf.Common.ServerInfoNode serverInfoNode = 1;
}
message RegisterToSceneResponse{
	int32 resultCode = 1;
	string resultMsg = 2;
	string sceneToken = 3;
}

message CharacterEnterSceneRequest{
	int32 taskId = 1;
	string sessionId = 2;
	int32 gameGateServerId = 3;
	HS.Protobuf.DBProxy.DBCharacter.DBCharacterNode dbChrNode = 4;
}
message SelfCharacterEnterSceneResponse{
	int32 taskId = 1;
	int32 resultCode = 2;
	string resultMsg = 3;
	HS.Protobuf.SceneEntity.NetActorNode selfNetActorNode	= 4;
	// 场景中的角色、怪物、物品信息也要返回
	repeated HS.Protobuf.SceneEntity.NetActorNode otherNetActorNodeList	= 5;
	repeated HS.Protobuf.SceneEntity.NetItemNode  otherNetItemNodeList	= 6;
}
message OtherEntityEnterSceneResponse{
	string sessionId = 1;
	int32 sceneId = 2;		// 防止因为时序问题，client已经切换场景了，这个包才过来。
	HS.Protobuf.SceneEntity.SceneEntityType entityType = 3;
	HS.Protobuf.SceneEntity.NetActorNode actorNode = 4;
	HS.Protobuf.SceneEntity.NetItemNode  itemNode  = 5;
}
message CharacterLeaveSceneRequest{
	int32 entityId = 1;
}
message OtherEntityLeaveSceneResponse{
	string sessionId = 1;
	int32 sceneId = 2;		
	int32 entityId = 3;
}

message ActorChangeModeRequest{
	int32 entityId = 1;
	HS.Protobuf.SceneEntity.NetActorMode mode = 2;
	int64 timestamp = 3;
}
message ActorChangeModeResponse{
	int32 entityId = 1;
	HS.Protobuf.SceneEntity.NetActorMode mode = 2;
	int64 timestamp = 3;
}
message ActorChangeStateRequest{
	string sessionId = 1;
	int32 entityId = 2;
	int64 timestamp = 3;
	HS.Protobuf.SceneEntity.NetActorState state = 4;
	HS.Protobuf.SceneEntity.NetTransform originalTransform = 6;
	oneof payLoad{
		float speed = 7;
	}
}
message ActorChangeStateResponse{
	string sessionId = 1;
	int32 entityId = 2;
	int64 timestamp = 3;
	HS.Protobuf.SceneEntity.NetActorState state = 4;
	HS.Protobuf.SceneEntity.NetTransform originalTransform = 6;
	oneof payLoad{
		float speed = 7;
	}
}
message ActorChangeMotionDataRequest{
	string sessionId = 1;
	int32 entityId = 2;
	int64 timestamp = 3;
	int32 speed = 4;
	HS.Protobuf.SceneEntity.NetVector3 rotation = 5;
	HS.Protobuf.SceneEntity.NetTransform originalTransform = 6;
}
message ActorChangeMotionDataResponse{
	string sessionId = 1;
	int32 entityId = 2;
	int64 timestamp = 3;
	float speed = 4;
	HS.Protobuf.SceneEntity.NetTransform originalTransform = 5;
}

// === 下面是无用的====================================================

//有其他角色进入场景响应
message SpaceCharactersEnterResponse{
	int32 spaceId = 1;
	repeated HS.Protobuf.SceneEntity.NetActor characterList = 2;
}
//character进入场景响应(自己)
message SpaceEnterResponse{
	HS.Protobuf.SceneEntity.NetActor character = 1;
	repeated HS.Protobuf.SceneEntity.NetActor characterList = 2;
	repeated HS.Protobuf.SceneEntity.NetEItem eItemList = 3;
}

//entity离开场景响应,通知其他玩家
message SpaceEntityLeaveResponse{
	int32 entityId = 1;
}

//同步entity:位置+状态
message NEntitySync{
	HS.Protobuf.SceneEntity.NetEntity entity = 1;
	bool force = 2;			//是否强制同步位置和旋转
	HS.Protobuf.SceneEntity.ActorState state = 3;
	int32 flag1 = 4;
}
//场景内的同步请求
message SpaceEntitySyncRequest{
	NEntitySync entitySync = 1;
}
message SpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}
//场景内的同步响应,和上面那个一样，
message CtlClientSpaceEntitySyncResponse{
	NEntitySync entitySync = 1;
}

//传送请求
message SpaceDeliverRequest{
	int32 spaceId = 1;
	int32 pointId = 2;	//场景中哪一个点的id
}
message SpaceDeliverResponse{
	int32  resultCode		= 1;
	string resultMsg		= 2;
}

//复活请求
message ReviveRequest{
	int32 entityId = 1;
}
message ReviveResponse{
	NEntitySync nEntitySycn = 1;
}

// itemEntity 信息同步响应包（没用上）
message NetEItemSync{
	HS.Protobuf.SceneEntity.NetEItem  netEItem =  1;
}
// item进入场景响应
message SpaceItemEnterResponse{
	HS.Protobuf.SceneEntity.NetEItem  netEItem =  1;
}

//actor属性更新响应
message PropertyUpdateRsponse{
	repeated HS.Protobuf.SceneEntity.PropertyUpdate list = 1;
}